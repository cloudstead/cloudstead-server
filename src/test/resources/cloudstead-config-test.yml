# Things in {{CURLIES}} will be read from the process environment when the server starts up.

serverName: cloudstead-api-test

publicUriBase: https://127.0.0.1

bcryptRounds: 2 # tests go much faster with very few bcrypt rounds
springContextPath: classpath:/{{SPRING_XML_PATH}}

staticAssets:
  baseUri: /
  assetRoot: static/
  mustacheCacheEnabled: false
  mustacheResourceRoot: static/
  utilPaths:
    INDEX_PATH: /index.html
    INDEX_ALIASES: /:/index.php
    LOCALIZE: /localize

http:
  port: 0
  baseUri: /api

jersey:
  resourcePackages:
  - cloudos.cloudstead.resources
  - org.cobbzilla.wizard.server
  - org.cobbzilla.wizard.filters
  - org.cobbzilla.wizard.exceptionmappers
  responseFilters: [ org.cobbzilla.wizard.filters.ScrubbableScrubber ]

database:
  driver: org.postgresql.Driver
  url: jdbc:postgresql://localhost:5432/cloudstead_test
  user: {{DB_USER}}
  password: {{DB_PASS}}

  hibernate:
    entityPackages: [ cloudos.cloudstead.model, cloudos.model.auth ]
    dialect: org.hibernate.dialect.PostgreSQLDialect
    showSql: true
    hbm2ddlAuto: create
    validationMode: ddl

adminAuthy:
  user: {{ADMIN_AUTHY_KEY}}
  baseUri: {{AUTHY_URI}}

authy:
  user: {{AUTHY_KEY}}
  baseUri: {{AUTHY_URI}}

cloudConfig:
  # the CloudOs java server to unroll and install on new instances
  cloudOsServerTarball: {{CLOUDOS_SERVER_TARBALL}}

  # where configs are stored using cloudos-lib library
  AWSAccessKeyId: {{AWS_ACCESS_KEY_ID}}
  AWSSecretKey: {{AWS_SECRET_ACCESS_KEY}}
  bucket: {{CLOUDOS_S3_BUCKET}}       # the bucket that all hosted cloudstead storage shares
  group: {{AWS_IAM_GROUP}}            # the group that grants per-user permissions to a subdir of the bucket
  dataKey: {{CLOUD_STORAGE_DATA_KEY}} # stored data is encrypted using this secret

  # allows many servers (dev, staging, individual devs, etc) to share a single bucket
  # must be set
  storageUser: {{CLOUD_STORAGE_USER}}

  # we spin up new hosted cloudstead instances in one of these clouds
  providers:
    - provider: AwsCloudType
      accountId: {{AWS_ACCESS_KEY_ID}}
      accountSecret: {{AWS_SECRET_ACCESS_KEY}}

    - provider: DigitalOceanCloudType
      accountId: {{DO_CLIENT_ID}}
      accountSecret: {{DO_API_KEY}}

    - provider: RackspaceCloudType
      accountId: {{RACKSPACE_CLIENT_ID}}
      accountSecret: {{RACKSPACE_API_KEY}}

  # all cloudOs hosts will live within this domain
  domain: {{CLOUDOS_PARENT_DOMAIN}}

  # for now we use a fixed cert (in fact one that is hardcoded to www.cloudstead.io)
  # in the near future we'll use a wildcard cert
  # in the not so distant future, we'll generate a new cert for each cloudos instance
  sslPem: {{SSL_PEM}}
  sslKey: {{SSL_KEY}}

  # chef master files, we use the deploy.sh script to provision the new instance
  chefMaster: {{CLOUDOS_CHEF_MASTER}}
  chefStagingDir: {{CLOUDOS_CHEF_STAGING_DIR}}

emailTemplateRoot: {{EMAIL_TEMPLATE_ROOT}}

emailSenderNames:
  welcome:
    fromName:  admin
    fromEmail: admin@example.com
  reset_password:
    fromName: admin
    fromEmail: admin@example.com

smtp:
  host: smtp.sendgrid.net
  port: 587
  user: {{SENDGRID_API_USER}}
  password: {{SENDGRID_API_KEY}}
  tlsEnabled: true

sendGridConfig:
  user: {{SENDGRID_API_USER}}
  password: {{SENDGRID_API_KEY}}

cloudOsDns:
  user: dummy
  password: dummy
  baseUri: http://107.170.204.49/api/mock

# Bogus data -- ApiResourceITBase uses MockAppStoreApiClient
appStore:
  user: admin
  password: foobar
  baseUri: http://127.0.0.1:3111